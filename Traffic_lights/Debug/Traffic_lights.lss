
Traffic_lights.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005b2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000626  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  00000626  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000626  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000658  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  00000694  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012a0  00000000  00000000  000007f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008a4  00000000  00000000  00001a94  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ab2  00000000  00000000  00002338  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000028c  00000000  00000000  00002dec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005b6  00000000  00000000  00003078  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005c0  00000000  00000000  0000362e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  00003bee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 61 01 	jmp	0x2c2	; 0x2c2 <__vector_1>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 aa 02 	jmp	0x554	; 0x554 <__vector_11>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	c7 00       	.word	0x00c7	; ????
  56:	32 01       	movw	r6, r4
  58:	32 01       	movw	r6, r4
  5a:	32 01       	movw	r6, r4
  5c:	32 01       	movw	r6, r4
  5e:	ca 00       	.word	0x00ca	; ????
  60:	d5 00       	.word	0x00d5	; ????
  62:	e0 00       	.word	0x00e0	; ????
  64:	eb 00       	.word	0x00eb	; ????
  66:	f6 00       	.word	0x00f6	; ????
  68:	01 01       	movw	r0, r2
  6a:	32 01       	movw	r6, r4
  6c:	32 01       	movw	r6, r4
  6e:	32 01       	movw	r6, r4
  70:	32 01       	movw	r6, r4
  72:	04 01       	movw	r0, r8
  74:	07 01       	movw	r0, r14
  76:	12 01       	movw	r2, r4
  78:	1d 01       	movw	r2, r26
  7a:	28 01       	movw	r4, r16

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf e5       	ldi	r28, 0x5F	; 95
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_clear_bss>:
  88:	20 e0       	ldi	r18, 0x00	; 0
  8a:	a0 e6       	ldi	r26, 0x60	; 96
  8c:	b0 e0       	ldi	r27, 0x00	; 0
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	a4 36       	cpi	r26, 0x64	; 100
  94:	b2 07       	cpc	r27, r18
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
  98:	0e 94 56 01 	call	0x2ac	; 0x2ac <main>
  9c:	0c 94 d7 02 	jmp	0x5ae	; 0x5ae <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <APP_init>:
* Purpose      : Initialize all the modules we will use(LEDs,Button,Timer0,Interrupt)
* Parameters   : void
* Return value : void
*****************************************************************************/
void APP_init(){
	TIMER0_normaMode_init();
  a4:	0e 94 8c 02 	call	0x518	; 0x518 <TIMER0_normaMode_init>
	TIMER0_off();
  a8:	0e 94 a3 02 	call	0x546	; 0x546 <TIMER0_off>
	LED_init(PORT_A,CAR_GREEN);
  ac:	60 e0       	ldi	r22, 0x00	; 0
  ae:	81 e4       	ldi	r24, 0x41	; 65
  b0:	0e 94 37 01 	call	0x26e	; 0x26e <LED_init>
	LED_init(PORT_A,CAR_YELLOW);
  b4:	61 e0       	ldi	r22, 0x01	; 1
  b6:	81 e4       	ldi	r24, 0x41	; 65
  b8:	0e 94 37 01 	call	0x26e	; 0x26e <LED_init>
	LED_init(PORT_A,CAR_RED);
  bc:	62 e0       	ldi	r22, 0x02	; 2
  be:	81 e4       	ldi	r24, 0x41	; 65
  c0:	0e 94 37 01 	call	0x26e	; 0x26e <LED_init>
	LED_init(PORT_B,PED_GREEN);
  c4:	60 e0       	ldi	r22, 0x00	; 0
  c6:	82 e4       	ldi	r24, 0x42	; 66
  c8:	0e 94 37 01 	call	0x26e	; 0x26e <LED_init>
	LED_init(PORT_B,PED_YELLOW);
  cc:	61 e0       	ldi	r22, 0x01	; 1
  ce:	82 e4       	ldi	r24, 0x42	; 66
  d0:	0e 94 37 01 	call	0x26e	; 0x26e <LED_init>
	LED_init(PORT_B,PED_RED);
  d4:	62 e0       	ldi	r22, 0x02	; 2
  d6:	82 e4       	ldi	r24, 0x42	; 66
  d8:	0e 94 37 01 	call	0x26e	; 0x26e <LED_init>
	BUTTON_init(PORT_D,CROSSWALK);
  dc:	62 e0       	ldi	r22, 0x02	; 2
  de:	84 e4       	ldi	r24, 0x44	; 68
  e0:	0e 94 33 01 	call	0x266	; 0x266 <BUTTON_init>
	INTERRUPT_init();
  e4:	0e 94 7f 02 	call	0x4fe	; 0x4fe <INTERRUPT_init>
  e8:	08 95       	ret

000000ea <CAR_green_state>:
* Purpose      : Car Green LED ON and pedestrians red LED off for 5 sec
* Parameters   : void
* Return value : void
*****************************************************************************/
void CAR_green_state(){
	LED_on(PORT_A,CAR_GREEN);
  ea:	60 e0       	ldi	r22, 0x00	; 0
  ec:	81 e4       	ldi	r24, 0x41	; 65
  ee:	0e 94 3b 01 	call	0x276	; 0x276 <LED_on>
	LED_on(PORT_B,PED_RED);
  f2:	62 e0       	ldi	r22, 0x02	; 2
  f4:	82 e4       	ldi	r24, 0x42	; 66
  f6:	0e 94 3b 01 	call	0x276	; 0x276 <LED_on>
	LED_off(PORT_A,CAR_YELLOW);
  fa:	61 e0       	ldi	r22, 0x01	; 1
  fc:	81 e4       	ldi	r24, 0x41	; 65
  fe:	0e 94 3f 01 	call	0x27e	; 0x27e <LED_off>
	LED_off(PORT_B,PED_YELLOW);
 102:	61 e0       	ldi	r22, 0x01	; 1
 104:	82 e4       	ldi	r24, 0x42	; 66
 106:	0e 94 3f 01 	call	0x27e	; 0x27e <LED_off>
	LED_off(PORT_A,CAR_RED);
 10a:	62 e0       	ldi	r22, 0x02	; 2
 10c:	81 e4       	ldi	r24, 0x41	; 65
 10e:	0e 94 3f 01 	call	0x27e	; 0x27e <LED_off>
	LED_off(PORT_B,PED_GREEN);
 112:	60 e0       	ldi	r22, 0x00	; 0
 114:	82 e4       	ldi	r24, 0x42	; 66
 116:	0e 94 3f 01 	call	0x27e	; 0x27e <LED_off>
 11a:	08 95       	ret

0000011c <CAR_yellow_state>:
* Purpose      : Car and Pedestrians Yellow LEDs blinking for 5 sec
* Parameters   : void
* Return value : void
*****************************************************************************/
void CAR_yellow_state(){
	LED_off(PORT_A,CAR_GREEN);
 11c:	60 e0       	ldi	r22, 0x00	; 0
 11e:	81 e4       	ldi	r24, 0x41	; 65
 120:	0e 94 3f 01 	call	0x27e	; 0x27e <LED_off>
	LED_off(PORT_B,PED_RED);
 124:	62 e0       	ldi	r22, 0x02	; 2
 126:	82 e4       	ldi	r24, 0x42	; 66
 128:	0e 94 3f 01 	call	0x27e	; 0x27e <LED_off>
	LED_off(PORT_A,CAR_RED);
 12c:	62 e0       	ldi	r22, 0x02	; 2
 12e:	81 e4       	ldi	r24, 0x41	; 65
 130:	0e 94 3f 01 	call	0x27e	; 0x27e <LED_off>
	LED_off(PORT_B,PED_GREEN);
 134:	60 e0       	ldi	r22, 0x00	; 0
 136:	82 e4       	ldi	r24, 0x42	; 66
 138:	0e 94 3f 01 	call	0x27e	; 0x27e <LED_off>
 13c:	08 95       	ret

0000013e <CAR_red_state>:
* Purpose      : Car red led On and pedestrians green LED Off for 5 sec
* Parameters   : void
* Return value : void
*****************************************************************************/
void CAR_red_state(){
	LED_off(PORT_A,CAR_GREEN);
 13e:	60 e0       	ldi	r22, 0x00	; 0
 140:	81 e4       	ldi	r24, 0x41	; 65
 142:	0e 94 3f 01 	call	0x27e	; 0x27e <LED_off>
	LED_off(PORT_B,PED_RED);
 146:	62 e0       	ldi	r22, 0x02	; 2
 148:	82 e4       	ldi	r24, 0x42	; 66
 14a:	0e 94 3f 01 	call	0x27e	; 0x27e <LED_off>
	LED_off(PORT_A,CAR_YELLOW);
 14e:	61 e0       	ldi	r22, 0x01	; 1
 150:	81 e4       	ldi	r24, 0x41	; 65
 152:	0e 94 3f 01 	call	0x27e	; 0x27e <LED_off>
	LED_off(PORT_B,PED_YELLOW);
 156:	61 e0       	ldi	r22, 0x01	; 1
 158:	82 e4       	ldi	r24, 0x42	; 66
 15a:	0e 94 3f 01 	call	0x27e	; 0x27e <LED_off>
	LED_on(PORT_A,CAR_RED);
 15e:	62 e0       	ldi	r22, 0x02	; 2
 160:	81 e4       	ldi	r24, 0x41	; 65
 162:	0e 94 3b 01 	call	0x276	; 0x276 <LED_on>
	LED_on(PORT_B,PED_GREEN);
 166:	60 e0       	ldi	r22, 0x00	; 0
 168:	82 e4       	ldi	r24, 0x42	; 66
 16a:	0e 94 3b 01 	call	0x276	; 0x276 <LED_on>
 16e:	08 95       	ret

00000170 <APP_start>:
* Purpose      : Start Normal Mode
* Parameters   : void
* Return value : void
*****************************************************************************/
void APP_start(){
	TIMER0_on();
 170:	0e 94 9c 02 	call	0x538	; 0x538 <TIMER0_on>
	switch(state){
 174:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 178:	8e 2f       	mov	r24, r30
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	84 31       	cpi	r24, 0x14	; 20
 17e:	91 05       	cpc	r25, r1
 180:	08 f0       	brcs	.+2      	; 0x184 <APP_start+0x14>
 182:	70 c0       	rjmp	.+224    	; 0x264 <APP_start+0xf4>
 184:	fc 01       	movw	r30, r24
 186:	e6 5d       	subi	r30, 0xD6	; 214
 188:	ff 4f       	sbci	r31, 0xFF	; 255
 18a:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__tablejump2__>
		case CAR_GREEN_ST:
		CAR_green_state();
 18e:	0e 94 75 00 	call	0xea	; 0xea <CAR_green_state>
		break;
 192:	08 95       	ret
		case CAR_YELLOW_ST:
		CAR_yellow_state();
 194:	0e 94 8e 00 	call	0x11c	; 0x11c <CAR_yellow_state>
		LED_off(PORT_A,CAR_YELLOW);
 198:	61 e0       	ldi	r22, 0x01	; 1
 19a:	81 e4       	ldi	r24, 0x41	; 65
 19c:	0e 94 3f 01 	call	0x27e	; 0x27e <LED_off>
		LED_off(PORT_B,PED_YELLOW);
 1a0:	61 e0       	ldi	r22, 0x01	; 1
 1a2:	82 e4       	ldi	r24, 0x42	; 66
 1a4:	0e 94 3f 01 	call	0x27e	; 0x27e <LED_off>
		break;
 1a8:	08 95       	ret
		case ON_YELLOW_ST:
		CAR_yellow_state();
 1aa:	0e 94 8e 00 	call	0x11c	; 0x11c <CAR_yellow_state>
		LED_on(PORT_A,CAR_YELLOW);
 1ae:	61 e0       	ldi	r22, 0x01	; 1
 1b0:	81 e4       	ldi	r24, 0x41	; 65
 1b2:	0e 94 3b 01 	call	0x276	; 0x276 <LED_on>
		LED_on(PORT_B,PED_YELLOW);
 1b6:	61 e0       	ldi	r22, 0x01	; 1
 1b8:	82 e4       	ldi	r24, 0x42	; 66
 1ba:	0e 94 3b 01 	call	0x276	; 0x276 <LED_on>
		break;
 1be:	08 95       	ret
		case OFF_YELLOW_ST2:
		CAR_yellow_state();
 1c0:	0e 94 8e 00 	call	0x11c	; 0x11c <CAR_yellow_state>
		LED_off(PORT_A,CAR_YELLOW);
 1c4:	61 e0       	ldi	r22, 0x01	; 1
 1c6:	81 e4       	ldi	r24, 0x41	; 65
 1c8:	0e 94 3f 01 	call	0x27e	; 0x27e <LED_off>
		LED_off(PORT_B,PED_YELLOW);
 1cc:	61 e0       	ldi	r22, 0x01	; 1
 1ce:	82 e4       	ldi	r24, 0x42	; 66
 1d0:	0e 94 3f 01 	call	0x27e	; 0x27e <LED_off>
		break;
 1d4:	08 95       	ret
		case ON_YELLOW_ST2:
		CAR_yellow_state();
 1d6:	0e 94 8e 00 	call	0x11c	; 0x11c <CAR_yellow_state>
		LED_on(PORT_A,CAR_YELLOW);
 1da:	61 e0       	ldi	r22, 0x01	; 1
 1dc:	81 e4       	ldi	r24, 0x41	; 65
 1de:	0e 94 3b 01 	call	0x276	; 0x276 <LED_on>
		LED_on(PORT_B,PED_YELLOW);
 1e2:	61 e0       	ldi	r22, 0x01	; 1
 1e4:	82 e4       	ldi	r24, 0x42	; 66
 1e6:	0e 94 3b 01 	call	0x276	; 0x276 <LED_on>
		break;
 1ea:	08 95       	ret
		case OFF_YELLOW_ST3:
		CAR_yellow_state();
 1ec:	0e 94 8e 00 	call	0x11c	; 0x11c <CAR_yellow_state>
		LED_off(PORT_A,CAR_YELLOW);
 1f0:	61 e0       	ldi	r22, 0x01	; 1
 1f2:	81 e4       	ldi	r24, 0x41	; 65
 1f4:	0e 94 3f 01 	call	0x27e	; 0x27e <LED_off>
		LED_off(PORT_B,PED_YELLOW);
 1f8:	61 e0       	ldi	r22, 0x01	; 1
 1fa:	82 e4       	ldi	r24, 0x42	; 66
 1fc:	0e 94 3f 01 	call	0x27e	; 0x27e <LED_off>
		break;
 200:	08 95       	ret
		case CAR_RED_ST:
		CAR_red_state();
 202:	0e 94 9f 00 	call	0x13e	; 0x13e <CAR_red_state>
		break;
 206:	08 95       	ret
		case PED_YELLOW_ST:
		CAR_yellow_state();
 208:	0e 94 8e 00 	call	0x11c	; 0x11c <CAR_yellow_state>
		break;
 20c:	08 95       	ret
		case ON_YELLOW_ST3:
		CAR_yellow_state();
 20e:	0e 94 8e 00 	call	0x11c	; 0x11c <CAR_yellow_state>
		LED_on(PORT_A,CAR_YELLOW);
 212:	61 e0       	ldi	r22, 0x01	; 1
 214:	81 e4       	ldi	r24, 0x41	; 65
 216:	0e 94 3b 01 	call	0x276	; 0x276 <LED_on>
		LED_on(PORT_B,PED_YELLOW);
 21a:	61 e0       	ldi	r22, 0x01	; 1
 21c:	82 e4       	ldi	r24, 0x42	; 66
 21e:	0e 94 3b 01 	call	0x276	; 0x276 <LED_on>
		break;
 222:	08 95       	ret
		case OFF_YELLOW_ST4:
		CAR_yellow_state();
 224:	0e 94 8e 00 	call	0x11c	; 0x11c <CAR_yellow_state>
		LED_off(PORT_A,CAR_YELLOW);
 228:	61 e0       	ldi	r22, 0x01	; 1
 22a:	81 e4       	ldi	r24, 0x41	; 65
 22c:	0e 94 3f 01 	call	0x27e	; 0x27e <LED_off>
		LED_off(PORT_B,PED_YELLOW);
 230:	61 e0       	ldi	r22, 0x01	; 1
 232:	82 e4       	ldi	r24, 0x42	; 66
 234:	0e 94 3f 01 	call	0x27e	; 0x27e <LED_off>
		break;
 238:	08 95       	ret
		case ON_YELLOW_ST4:
		CAR_yellow_state();
 23a:	0e 94 8e 00 	call	0x11c	; 0x11c <CAR_yellow_state>
		LED_on(PORT_A,CAR_YELLOW);
 23e:	61 e0       	ldi	r22, 0x01	; 1
 240:	81 e4       	ldi	r24, 0x41	; 65
 242:	0e 94 3b 01 	call	0x276	; 0x276 <LED_on>
		LED_on(PORT_B,PED_YELLOW);
 246:	61 e0       	ldi	r22, 0x01	; 1
 248:	82 e4       	ldi	r24, 0x42	; 66
 24a:	0e 94 3b 01 	call	0x276	; 0x276 <LED_on>
		break;
 24e:	08 95       	ret
		case OFF_YELLOW_ST5:
		CAR_yellow_state();
 250:	0e 94 8e 00 	call	0x11c	; 0x11c <CAR_yellow_state>
		LED_off(PORT_A,CAR_YELLOW);
 254:	61 e0       	ldi	r22, 0x01	; 1
 256:	81 e4       	ldi	r24, 0x41	; 65
 258:	0e 94 3f 01 	call	0x27e	; 0x27e <LED_off>
		LED_off(PORT_B,PED_YELLOW);
 25c:	61 e0       	ldi	r22, 0x01	; 1
 25e:	82 e4       	ldi	r24, 0x42	; 66
 260:	0e 94 3f 01 	call	0x27e	; 0x27e <LED_off>
 264:	08 95       	ret

00000266 <BUTTON_init>:
* Purpose      : Set Pin Direction as input
* Parameters   : uint8_t buttonPort,uint8_t buttonPin
* Return value : void
*****************************************************************************/
void BUTTON_init(uint8_t buttonPort,uint8_t buttonPin){
	DIO_init(buttonPort,buttonPin,IN);	
 266:	40 e0       	ldi	r20, 0x00	; 0
 268:	0e 94 8f 01 	call	0x31e	; 0x31e <DIO_init>
 26c:	08 95       	ret

0000026e <LED_init>:
* Purpose      : Set Pin Direction as output
* Parameters   : uint8_t ledPort,uint8_t ledPin
* Return value : void
*****************************************************************************/
void LED_init(uint8_t ledPort,uint8_t ledPin){
	DIO_init(ledPort,ledPin,OUT); // Output device
 26e:	41 e0       	ldi	r20, 0x01	; 1
 270:	0e 94 8f 01 	call	0x31e	; 0x31e <DIO_init>
 274:	08 95       	ret

00000276 <LED_on>:
* Purpose      : Set Pin Output to High
* Parameters   : uint8_t ledPort,uint8_t ledPin
* Return value : void
*****************************************************************************/
void LED_on(uint8_t ledPort,uint8_t ledPin){
	DIO_write(ledPort,ledPin,HIGH);
 276:	41 e0       	ldi	r20, 0x01	; 1
 278:	0e 94 07 02 	call	0x40e	; 0x40e <DIO_write>
 27c:	08 95       	ret

0000027e <LED_off>:
* Purpose      : CLear Pin output to be Low
* Parameters   : uint8_t ledPort,uint8_t ledPin
* Return value : void
*****************************************************************************/
void LED_off(uint8_t ledPort,uint8_t ledPin){
	DIO_write(ledPort,ledPin,LOW);
 27e:	40 e0       	ldi	r20, 0x00	; 0
 280:	0e 94 07 02 	call	0x40e	; 0x40e <DIO_write>
 284:	08 95       	ret

00000286 <ISR_Ovf_Timer0>:
	}
}

void ISR_Ovf_Timer0(){
	static uint8_t counter=0;			
	counter++;
 286:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <counter.1679>
 28a:	8f 5f       	subi	r24, 0xFF	; 255
 28c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <counter.1679>
	if(counter==61){	//every second 
 290:	8d 33       	cpi	r24, 0x3D	; 61
 292:	59 f4       	brne	.+22     	; 0x2aa <ISR_Ovf_Timer0+0x24>
		state++;
 294:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 298:	8f 5f       	subi	r24, 0xFF	; 255
 29a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		counter=0;
 29e:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <counter.1679>
		if(state==20){state=0;}
 2a2:	84 31       	cpi	r24, 0x14	; 20
 2a4:	11 f4       	brne	.+4      	; 0x2aa <ISR_Ovf_Timer0+0x24>
 2a6:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 2aa:	08 95       	ret

000002ac <main>:

extern EN_CARState_t state;
void ISR_Ovf_Timer0();
int main(void)
{
    APP_init();
 2ac:	0e 94 52 00 	call	0xa4	; 0xa4 <APP_init>
	timer0_ovf_isr=ISR_Ovf_Timer0;
 2b0:	83 e4       	ldi	r24, 0x43	; 67
 2b2:	91 e0       	ldi	r25, 0x01	; 1
 2b4:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <timer0_ovf_isr+0x1>
 2b8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <timer0_ovf_isr>
	while (1) 
    {
		APP_start();
 2bc:	0e 94 b8 00 	call	0x170	; 0x170 <APP_start>
 2c0:	fd cf       	rjmp	.-6      	; 0x2bc <main+0x10>

000002c2 <__vector_1>:
    }
}

ISR(INT0_vect){
 2c2:	1f 92       	push	r1
 2c4:	0f 92       	push	r0
 2c6:	0f b6       	in	r0, 0x3f	; 63
 2c8:	0f 92       	push	r0
 2ca:	11 24       	eor	r1, r1
 2cc:	2f 93       	push	r18
 2ce:	3f 93       	push	r19
 2d0:	4f 93       	push	r20
 2d2:	5f 93       	push	r21
 2d4:	6f 93       	push	r22
 2d6:	7f 93       	push	r23
 2d8:	8f 93       	push	r24
 2da:	9f 93       	push	r25
 2dc:	af 93       	push	r26
 2de:	bf 93       	push	r27
 2e0:	ef 93       	push	r30
 2e2:	ff 93       	push	r31
	if(state<CAR_YELLOW_ST||state>=PED_YELLOW_ST){
 2e4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2e8:	85 50       	subi	r24, 0x05	; 5
 2ea:	8a 30       	cpi	r24, 0x0A	; 10
 2ec:	38 f0       	brcs	.+14     	; 0x2fc <__vector_1+0x3a>
	TIMER0_off();
 2ee:	0e 94 a3 02 	call	0x546	; 0x546 <TIMER0_off>
	TIMER0_on();
 2f2:	0e 94 9c 02 	call	0x538	; 0x538 <TIMER0_on>
	state=5;
 2f6:	85 e0       	ldi	r24, 0x05	; 5
 2f8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	}
	else{
		/*Do nothing*/
	}
}
 2fc:	ff 91       	pop	r31
 2fe:	ef 91       	pop	r30
 300:	bf 91       	pop	r27
 302:	af 91       	pop	r26
 304:	9f 91       	pop	r25
 306:	8f 91       	pop	r24
 308:	7f 91       	pop	r23
 30a:	6f 91       	pop	r22
 30c:	5f 91       	pop	r21
 30e:	4f 91       	pop	r20
 310:	3f 91       	pop	r19
 312:	2f 91       	pop	r18
 314:	0f 90       	pop	r0
 316:	0f be       	out	0x3f, r0	; 63
 318:	0f 90       	pop	r0
 31a:	1f 90       	pop	r1
 31c:	18 95       	reti

0000031e <DIO_init>:
* Purpose      : Initialize PIN Direction (IN/OUT)
* Parameters   : uint8_t portnumber,uint8_t pinnumber,uint8_t direction
* Return value : void
*****************************************************************************/
void DIO_init(uint8_t portnumber,uint8_t pinnumber,uint8_t direction){
	switch(portnumber){
 31e:	82 34       	cpi	r24, 0x42	; 66
 320:	29 f1       	breq	.+74     	; 0x36c <DIO_init+0x4e>
 322:	18 f4       	brcc	.+6      	; 0x32a <DIO_init+0xc>
 324:	81 34       	cpi	r24, 0x41	; 65
 326:	39 f0       	breq	.+14     	; 0x336 <DIO_init+0x18>
 328:	08 95       	ret
 32a:	83 34       	cpi	r24, 0x43	; 67
 32c:	d1 f1       	breq	.+116    	; 0x3a2 <DIO_init+0x84>
 32e:	84 34       	cpi	r24, 0x44	; 68
 330:	09 f4       	brne	.+2      	; 0x334 <DIO_init+0x16>
 332:	52 c0       	rjmp	.+164    	; 0x3d8 <DIO_init+0xba>
 334:	08 95       	ret
		case PORT_A:
		if(direction==OUT){
 336:	41 30       	cpi	r20, 0x01	; 1
 338:	59 f4       	brne	.+22     	; 0x350 <DIO_init+0x32>
			DDRA |=(1<<pinnumber);
 33a:	2a b3       	in	r18, 0x1a	; 26
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	02 c0       	rjmp	.+4      	; 0x346 <DIO_init+0x28>
 342:	88 0f       	add	r24, r24
 344:	99 1f       	adc	r25, r25
 346:	6a 95       	dec	r22
 348:	e2 f7       	brpl	.-8      	; 0x342 <DIO_init+0x24>
 34a:	82 2b       	or	r24, r18
 34c:	8a bb       	out	0x1a, r24	; 26
 34e:	08 95       	ret
		}
		else if (direction==IN){
 350:	41 11       	cpse	r20, r1
 352:	5c c0       	rjmp	.+184    	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
			DDRA &=~(1<<pinnumber);
 354:	2a b3       	in	r18, 0x1a	; 26
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	02 c0       	rjmp	.+4      	; 0x360 <DIO_init+0x42>
 35c:	88 0f       	add	r24, r24
 35e:	99 1f       	adc	r25, r25
 360:	6a 95       	dec	r22
 362:	e2 f7       	brpl	.-8      	; 0x35c <DIO_init+0x3e>
 364:	80 95       	com	r24
 366:	82 23       	and	r24, r18
 368:	8a bb       	out	0x1a, r24	; 26
 36a:	08 95       	ret
		else{
			//error
		}
		break;
		case PORT_B:
		if(direction==OUT){
 36c:	41 30       	cpi	r20, 0x01	; 1
 36e:	59 f4       	brne	.+22     	; 0x386 <DIO_init+0x68>
			DDRB |=(1<<pinnumber);
 370:	27 b3       	in	r18, 0x17	; 23
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	02 c0       	rjmp	.+4      	; 0x37c <DIO_init+0x5e>
 378:	88 0f       	add	r24, r24
 37a:	99 1f       	adc	r25, r25
 37c:	6a 95       	dec	r22
 37e:	e2 f7       	brpl	.-8      	; 0x378 <DIO_init+0x5a>
 380:	82 2b       	or	r24, r18
 382:	87 bb       	out	0x17, r24	; 23
 384:	08 95       	ret
		}
		else if (direction==IN){
 386:	41 11       	cpse	r20, r1
 388:	41 c0       	rjmp	.+130    	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
			DDRB &=~(1<<pinnumber);
 38a:	27 b3       	in	r18, 0x17	; 23
 38c:	81 e0       	ldi	r24, 0x01	; 1
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	02 c0       	rjmp	.+4      	; 0x396 <DIO_init+0x78>
 392:	88 0f       	add	r24, r24
 394:	99 1f       	adc	r25, r25
 396:	6a 95       	dec	r22
 398:	e2 f7       	brpl	.-8      	; 0x392 <DIO_init+0x74>
 39a:	80 95       	com	r24
 39c:	82 23       	and	r24, r18
 39e:	87 bb       	out	0x17, r24	; 23
 3a0:	08 95       	ret
		else{
			//error
		}
		break;
		case PORT_C:
		if(direction==OUT){
 3a2:	41 30       	cpi	r20, 0x01	; 1
 3a4:	59 f4       	brne	.+22     	; 0x3bc <DIO_init+0x9e>
			DDRC |=(1<<pinnumber);
 3a6:	24 b3       	in	r18, 0x14	; 20
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <DIO_init+0x94>
 3ae:	88 0f       	add	r24, r24
 3b0:	99 1f       	adc	r25, r25
 3b2:	6a 95       	dec	r22
 3b4:	e2 f7       	brpl	.-8      	; 0x3ae <DIO_init+0x90>
 3b6:	82 2b       	or	r24, r18
 3b8:	84 bb       	out	0x14, r24	; 20
 3ba:	08 95       	ret
		}
		else if (direction==IN){
 3bc:	41 11       	cpse	r20, r1
 3be:	26 c0       	rjmp	.+76     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
			DDRC &=~(1<<pinnumber);
 3c0:	24 b3       	in	r18, 0x14	; 20
 3c2:	81 e0       	ldi	r24, 0x01	; 1
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	02 c0       	rjmp	.+4      	; 0x3cc <DIO_init+0xae>
 3c8:	88 0f       	add	r24, r24
 3ca:	99 1f       	adc	r25, r25
 3cc:	6a 95       	dec	r22
 3ce:	e2 f7       	brpl	.-8      	; 0x3c8 <DIO_init+0xaa>
 3d0:	80 95       	com	r24
 3d2:	82 23       	and	r24, r18
 3d4:	84 bb       	out	0x14, r24	; 20
 3d6:	08 95       	ret
		else{
			//error
		}
		break;
		case PORT_D:
		if(direction==OUT){
 3d8:	41 30       	cpi	r20, 0x01	; 1
 3da:	59 f4       	brne	.+22     	; 0x3f2 <DIO_init+0xd4>
			DDRD |=(1<<pinnumber);
 3dc:	21 b3       	in	r18, 0x11	; 17
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <DIO_init+0xca>
 3e4:	88 0f       	add	r24, r24
 3e6:	99 1f       	adc	r25, r25
 3e8:	6a 95       	dec	r22
 3ea:	e2 f7       	brpl	.-8      	; 0x3e4 <DIO_init+0xc6>
 3ec:	82 2b       	or	r24, r18
 3ee:	81 bb       	out	0x11, r24	; 17
 3f0:	08 95       	ret
		}
		else if (direction==IN){
 3f2:	41 11       	cpse	r20, r1
 3f4:	0b c0       	rjmp	.+22     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
			DDRD &=~(1<<pinnumber);
 3f6:	21 b3       	in	r18, 0x11	; 17
 3f8:	81 e0       	ldi	r24, 0x01	; 1
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	02 c0       	rjmp	.+4      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 3fe:	88 0f       	add	r24, r24
 400:	99 1f       	adc	r25, r25
 402:	6a 95       	dec	r22
 404:	e2 f7       	brpl	.-8      	; 0x3fe <DIO_init+0xe0>
 406:	80 95       	com	r24
 408:	82 23       	and	r24, r18
 40a:	81 bb       	out	0x11, r24	; 17
 40c:	08 95       	ret

0000040e <DIO_write>:
* Purpose      : Write (High/LOW) for specific PIN 
* Parameters   : uint8_t portnumber,uint8_t pinnumber,uint8_t value
* Return value : void
*****************************************************************************/
void DIO_write(uint8_t portnumber,uint8_t pinnumber,uint8_t value){
	switch(portnumber){
 40e:	82 34       	cpi	r24, 0x42	; 66
 410:	29 f1       	breq	.+74     	; 0x45c <DIO_write+0x4e>
 412:	18 f4       	brcc	.+6      	; 0x41a <DIO_write+0xc>
 414:	81 34       	cpi	r24, 0x41	; 65
 416:	39 f0       	breq	.+14     	; 0x426 <DIO_write+0x18>
 418:	08 95       	ret
 41a:	83 34       	cpi	r24, 0x43	; 67
 41c:	d1 f1       	breq	.+116    	; 0x492 <DIO_write+0x84>
 41e:	84 34       	cpi	r24, 0x44	; 68
 420:	09 f4       	brne	.+2      	; 0x424 <DIO_write+0x16>
 422:	52 c0       	rjmp	.+164    	; 0x4c8 <DIO_write+0xba>
 424:	08 95       	ret
		case PORT_A:
		if(value==HIGH){
 426:	41 30       	cpi	r20, 0x01	; 1
 428:	59 f4       	brne	.+22     	; 0x440 <DIO_write+0x32>
			PORTA |=(1<<pinnumber);
 42a:	2b b3       	in	r18, 0x1b	; 27
 42c:	81 e0       	ldi	r24, 0x01	; 1
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	02 c0       	rjmp	.+4      	; 0x436 <DIO_write+0x28>
 432:	88 0f       	add	r24, r24
 434:	99 1f       	adc	r25, r25
 436:	6a 95       	dec	r22
 438:	e2 f7       	brpl	.-8      	; 0x432 <DIO_write+0x24>
 43a:	82 2b       	or	r24, r18
 43c:	8b bb       	out	0x1b, r24	; 27
 43e:	08 95       	ret
		}
		else if (value==LOW){
 440:	41 11       	cpse	r20, r1
 442:	5c c0       	rjmp	.+184    	; 0x4fc <DIO_write+0xee>
			PORTA &=~(1<<pinnumber);
 444:	2b b3       	in	r18, 0x1b	; 27
 446:	81 e0       	ldi	r24, 0x01	; 1
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	02 c0       	rjmp	.+4      	; 0x450 <DIO_write+0x42>
 44c:	88 0f       	add	r24, r24
 44e:	99 1f       	adc	r25, r25
 450:	6a 95       	dec	r22
 452:	e2 f7       	brpl	.-8      	; 0x44c <DIO_write+0x3e>
 454:	80 95       	com	r24
 456:	82 23       	and	r24, r18
 458:	8b bb       	out	0x1b, r24	; 27
 45a:	08 95       	ret
		else{
			//error
		}
		break;
		case PORT_B:
		if(value==HIGH){
 45c:	41 30       	cpi	r20, 0x01	; 1
 45e:	59 f4       	brne	.+22     	; 0x476 <DIO_write+0x68>
			PORTB |=(1<<pinnumber);
 460:	28 b3       	in	r18, 0x18	; 24
 462:	81 e0       	ldi	r24, 0x01	; 1
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	02 c0       	rjmp	.+4      	; 0x46c <DIO_write+0x5e>
 468:	88 0f       	add	r24, r24
 46a:	99 1f       	adc	r25, r25
 46c:	6a 95       	dec	r22
 46e:	e2 f7       	brpl	.-8      	; 0x468 <DIO_write+0x5a>
 470:	82 2b       	or	r24, r18
 472:	88 bb       	out	0x18, r24	; 24
 474:	08 95       	ret
		}
		else if (value==LOW){
 476:	41 11       	cpse	r20, r1
 478:	41 c0       	rjmp	.+130    	; 0x4fc <DIO_write+0xee>
			PORTB &=~(1<<pinnumber);
 47a:	28 b3       	in	r18, 0x18	; 24
 47c:	81 e0       	ldi	r24, 0x01	; 1
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	02 c0       	rjmp	.+4      	; 0x486 <DIO_write+0x78>
 482:	88 0f       	add	r24, r24
 484:	99 1f       	adc	r25, r25
 486:	6a 95       	dec	r22
 488:	e2 f7       	brpl	.-8      	; 0x482 <DIO_write+0x74>
 48a:	80 95       	com	r24
 48c:	82 23       	and	r24, r18
 48e:	88 bb       	out	0x18, r24	; 24
 490:	08 95       	ret
		else{
			//error
		}
		break;
		case PORT_C:
		if(value==HIGH){
 492:	41 30       	cpi	r20, 0x01	; 1
 494:	59 f4       	brne	.+22     	; 0x4ac <DIO_write+0x9e>
			PORTC |=(1<<pinnumber);
 496:	25 b3       	in	r18, 0x15	; 21
 498:	81 e0       	ldi	r24, 0x01	; 1
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	02 c0       	rjmp	.+4      	; 0x4a2 <DIO_write+0x94>
 49e:	88 0f       	add	r24, r24
 4a0:	99 1f       	adc	r25, r25
 4a2:	6a 95       	dec	r22
 4a4:	e2 f7       	brpl	.-8      	; 0x49e <DIO_write+0x90>
 4a6:	82 2b       	or	r24, r18
 4a8:	85 bb       	out	0x15, r24	; 21
 4aa:	08 95       	ret
		}
		else if (value==LOW){
 4ac:	41 11       	cpse	r20, r1
 4ae:	26 c0       	rjmp	.+76     	; 0x4fc <DIO_write+0xee>
			PORTC &=~(1<<pinnumber);
 4b0:	25 b3       	in	r18, 0x15	; 21
 4b2:	81 e0       	ldi	r24, 0x01	; 1
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	02 c0       	rjmp	.+4      	; 0x4bc <DIO_write+0xae>
 4b8:	88 0f       	add	r24, r24
 4ba:	99 1f       	adc	r25, r25
 4bc:	6a 95       	dec	r22
 4be:	e2 f7       	brpl	.-8      	; 0x4b8 <DIO_write+0xaa>
 4c0:	80 95       	com	r24
 4c2:	82 23       	and	r24, r18
 4c4:	85 bb       	out	0x15, r24	; 21
 4c6:	08 95       	ret
		else{
			//error
		}
		break;
		case PORT_D:
		if(value==HIGH){
 4c8:	41 30       	cpi	r20, 0x01	; 1
 4ca:	59 f4       	brne	.+22     	; 0x4e2 <DIO_write+0xd4>
			PORTD |=(1<<pinnumber);
 4cc:	22 b3       	in	r18, 0x12	; 18
 4ce:	81 e0       	ldi	r24, 0x01	; 1
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	02 c0       	rjmp	.+4      	; 0x4d8 <DIO_write+0xca>
 4d4:	88 0f       	add	r24, r24
 4d6:	99 1f       	adc	r25, r25
 4d8:	6a 95       	dec	r22
 4da:	e2 f7       	brpl	.-8      	; 0x4d4 <DIO_write+0xc6>
 4dc:	82 2b       	or	r24, r18
 4de:	82 bb       	out	0x12, r24	; 18
 4e0:	08 95       	ret
		}
		else if (value==LOW){
 4e2:	41 11       	cpse	r20, r1
 4e4:	0b c0       	rjmp	.+22     	; 0x4fc <DIO_write+0xee>
			PORTD &=~(1<<pinnumber);
 4e6:	22 b3       	in	r18, 0x12	; 18
 4e8:	81 e0       	ldi	r24, 0x01	; 1
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	02 c0       	rjmp	.+4      	; 0x4f2 <DIO_write+0xe4>
 4ee:	88 0f       	add	r24, r24
 4f0:	99 1f       	adc	r25, r25
 4f2:	6a 95       	dec	r22
 4f4:	e2 f7       	brpl	.-8      	; 0x4ee <DIO_write+0xe0>
 4f6:	80 95       	com	r24
 4f8:	82 23       	and	r24, r18
 4fa:	82 bb       	out	0x12, r24	; 18
 4fc:	08 95       	ret

000004fe <INTERRUPT_init>:
* Purpose      : Initialize External interrupt for pin INT0 as low level trigger
* Parameters   : void
* Return value : void
*****************************************************************************/
void INTERRUPT_init(void){
	SETBIT(SREG,7); //GLOBAL INTERRUPT ENABLE
 4fe:	8f b7       	in	r24, 0x3f	; 63
 500:	80 68       	ori	r24, 0x80	; 128
 502:	8f bf       	out	0x3f, r24	; 63
	SETBIT(GICR,INT0);
 504:	8b b7       	in	r24, 0x3b	; 59
 506:	80 64       	ori	r24, 0x40	; 64
 508:	8b bf       	out	0x3b, r24	; 59
	CLRBIT(MCUCR,ISC00); //lOW LEVEL ENABLE FOR INT0
 50a:	85 b7       	in	r24, 0x35	; 53
 50c:	8e 7f       	andi	r24, 0xFE	; 254
 50e:	85 bf       	out	0x35, r24	; 53
	CLRBIT(MCUCR,ISC01); //lOW LEVEL ENABLE FOR INT0
 510:	85 b7       	in	r24, 0x35	; 53
 512:	8d 7f       	andi	r24, 0xFD	; 253
 514:	85 bf       	out	0x35, r24	; 53
 516:	08 95       	ret

00000518 <TIMER0_normaMode_init>:
* Purpose      : init timer in normal mode with 1024 prescaler
* Parameters   : void
* Return value : void
*****************************************************************************/
void TIMER0_normaMode_init(void){
	SETBIT(TCCR0,CS00);// prescaler 1024
 518:	83 b7       	in	r24, 0x33	; 51
 51a:	81 60       	ori	r24, 0x01	; 1
 51c:	83 bf       	out	0x33, r24	; 51
	SETBIT(TCCR0,CS02);// prescaler 1024
 51e:	83 b7       	in	r24, 0x33	; 51
 520:	84 60       	ori	r24, 0x04	; 4
 522:	83 bf       	out	0x33, r24	; 51
	SETBIT(TCCR0,FOC0);
 524:	83 b7       	in	r24, 0x33	; 51
 526:	80 68       	ori	r24, 0x80	; 128
 528:	83 bf       	out	0x33, r24	; 51
	SETBIT(TIMSK,TOIE0); // enable timer ovf interrupt
 52a:	89 b7       	in	r24, 0x39	; 57
 52c:	81 60       	ori	r24, 0x01	; 1
 52e:	89 bf       	out	0x39, r24	; 57
	SETBIT(SREG, 7);	// enable global interrupt
 530:	8f b7       	in	r24, 0x3f	; 63
 532:	80 68       	ori	r24, 0x80	; 128
 534:	8f bf       	out	0x3f, r24	; 63
 536:	08 95       	ret

00000538 <TIMER0_on>:
* Purpose      : Turn timer0 on with 1024 prescaler
* Parameters   : void
* Return value : void
*****************************************************************************/
void TIMER0_on(void){
	SETBIT(TCCR0,CS00);
 538:	83 b7       	in	r24, 0x33	; 51
 53a:	81 60       	ori	r24, 0x01	; 1
 53c:	83 bf       	out	0x33, r24	; 51
	SETBIT(TCCR0,CS02);
 53e:	83 b7       	in	r24, 0x33	; 51
 540:	84 60       	ori	r24, 0x04	; 4
 542:	83 bf       	out	0x33, r24	; 51
 544:	08 95       	ret

00000546 <TIMER0_off>:
* Purpose      : Turn timer0 off
* Parameters   : void
* Return value : void
*****************************************************************************/
void TIMER0_off(void){
	CLRBIT(TCCR0,CS00);
 546:	83 b7       	in	r24, 0x33	; 51
 548:	8e 7f       	andi	r24, 0xFE	; 254
 54a:	83 bf       	out	0x33, r24	; 51
	CLRBIT(TCCR0,CS02);
 54c:	83 b7       	in	r24, 0x33	; 51
 54e:	8b 7f       	andi	r24, 0xFB	; 251
 550:	83 bf       	out	0x33, r24	; 51
 552:	08 95       	ret

00000554 <__vector_11>:
}

ISR(TIMER0_OVF_vect){
 554:	1f 92       	push	r1
 556:	0f 92       	push	r0
 558:	0f b6       	in	r0, 0x3f	; 63
 55a:	0f 92       	push	r0
 55c:	11 24       	eor	r1, r1
 55e:	2f 93       	push	r18
 560:	3f 93       	push	r19
 562:	4f 93       	push	r20
 564:	5f 93       	push	r21
 566:	6f 93       	push	r22
 568:	7f 93       	push	r23
 56a:	8f 93       	push	r24
 56c:	9f 93       	push	r25
 56e:	af 93       	push	r26
 570:	bf 93       	push	r27
 572:	ef 93       	push	r30
 574:	ff 93       	push	r31
	timer0_ovf_isr();
 576:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <timer0_ovf_isr>
 57a:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <timer0_ovf_isr+0x1>
 57e:	09 95       	icall
}
 580:	ff 91       	pop	r31
 582:	ef 91       	pop	r30
 584:	bf 91       	pop	r27
 586:	af 91       	pop	r26
 588:	9f 91       	pop	r25
 58a:	8f 91       	pop	r24
 58c:	7f 91       	pop	r23
 58e:	6f 91       	pop	r22
 590:	5f 91       	pop	r21
 592:	4f 91       	pop	r20
 594:	3f 91       	pop	r19
 596:	2f 91       	pop	r18
 598:	0f 90       	pop	r0
 59a:	0f be       	out	0x3f, r0	; 63
 59c:	0f 90       	pop	r0
 59e:	1f 90       	pop	r1
 5a0:	18 95       	reti

000005a2 <__tablejump2__>:
 5a2:	ee 0f       	add	r30, r30
 5a4:	ff 1f       	adc	r31, r31
 5a6:	05 90       	lpm	r0, Z+
 5a8:	f4 91       	lpm	r31, Z
 5aa:	e0 2d       	mov	r30, r0
 5ac:	09 94       	ijmp

000005ae <_exit>:
 5ae:	f8 94       	cli

000005b0 <__stop_program>:
 5b0:	ff cf       	rjmp	.-2      	; 0x5b0 <__stop_program>
